# Define a process structure
class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.completion_time = 0
        self.turnaround_time = 0
        self.waiting_time = 0

# Function to perform SJF Scheduling
def sjf_scheduling(processes):
    n = len(processes)
    time = 0
    completed = 0
    processes.sort(key=lambda x: (x.arrival_time, x.burst_time))
    is_completed = [False] * n
    schedule_order = []

    while completed != n:
        idx = -1
        min_burst = float('inf')

        for i in range(n):
            if processes[i].arrival_time <= time and not is_completed[i]:
                if processes[i].burst_time < min_burst:
                    min_burst = processes[i].burst_time
                    idx = i
                elif processes[i].burst_time == min_burst:
                    if processes[i].arrival_time < processes[idx].arrival_time:
                        idx = i

        if idx != -1:
            p = processes[idx]
            p.completion_time = time + p.burst_time
            p.turnaround_time = p.completion_time - p.arrival_time
            p.waiting_time = p.turnaround_time - p.burst_time
            time = p.completion_time
            is_completed[idx] = True
            completed += 1
            schedule_order.append(p.pid)
        else:
            time += 1  # If no process has arrived yet

    # Display results
    print("\nProcess\tAT\tBT\tCT\tTAT\tWT")
    for p in processes:
        print(f"{p.pid}\t\t{p.arrival_time}\t{p.burst_time}\t{p.completion_time}\t{p.turnaround_time}\t{p.waiting_time}")
    
    avg_tat = sum(p.turnaround_time for p in processes) / n
    avg_wt = sum(p.waiting_time for p in processes) / n
    print(f"\nAverage Turnaround Time = {avg_tat:.2f}")
    print(f"Average Waiting Time = {avg_wt:.2f}")
    print(f"\nScheduling Order: {' -> '.join(schedule_order)}")

# Example usage
process_list = [
    Process("P1", 0, 8),
    Process("P2", 1, 4),
    Process("P3", 2, 9),
    Process("P4", 3, 5)
]

sjf_scheduling(process_list)
